
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const lovableApiKey = Deno.env.get('LOVABLE_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { scenario, weddingDate, guestCount, ceremonyTime } = await req.json();

    console.log('üéØ Processing wedding scenario:', { scenario, weddingDate, guestCount, ceremonyTime });

    const systemPrompt = `Tu es un wedding planner expert avec 15 ans d'exp√©rience en logistique √©v√©nementielle. 

Ton r√¥le est d'analyser le sc√©nario de mariage fourni et de cr√©er un planning d√©taill√© et personnalis√© pour le jour J et √©ventuellement J-1.

INSTRUCTIONS IMPORTANTES :
- Analyse le sc√©nario utilisateur pour comprendre ses priorit√©s et contraintes
- Propose un planning coh√©rent avec des horaires r√©alistes
- Inclus les pr√©paratifs J-1 si n√©cessaire (d√©coration, livraisons, etc.)
- Assigne chaque t√¢che √† un r√¥le appropri√© (Mari√©s, T√©moins, Wedding Planner, Prestataires, etc.)
- Respecte les cat√©gories : Arriv√©e, Pr√©paration, C√©r√©monie, Cocktail, R√©ception, Animation, Photos/Vid√©os, Logistique, Autre
- Donne des dur√©es r√©alistes en minutes
- Priorise selon l'importance : high, medium, low

FORMAT DE R√âPONSE ATTENDU (JSON uniquement) :
{
  "tasks": [
    {
      "title": "Titre de la t√¢che",
      "description": "Description d√©taill√©e",
      "start_time": "HH:MM",
      "duration": 60,
      "category": "Pr√©paration",
      "priority": "high",
      "assigned_role": "Mari√©s",
      "day": "J" ou "J-1",
      "notes": "Conseils personnalis√©s"
    }
  ],
  "summary": "R√©sum√© du planning avec conseils g√©n√©raux"
}

R√îLES DISPONIBLES : Mari√©s, T√©moin(s), Famille proche, Wedding Planner, Photographe, Vid√©aste, DJ/Musiciens, Traiteur, Fleuriste, Coiffeur/Maquilleur, C√©l√©brant, Responsable lieu, S√©curit√©, Transport, Autre

CAT√âGORIES : Arriv√©e, Pr√©paration, C√©r√©monie, Cocktail, R√©ception, Animation, Photos/Vid√©os, Logistique, Autre`;

    const userPrompt = `Sc√©nario de mariage √† analyser :
"${scenario}"

Informations compl√©mentaires :
- Date du mariage : ${weddingDate || 'Non sp√©cifi√©e'}
- Nombre d'invit√©s : ${guestCount || 'Non sp√©cifi√©'}
- Heure de c√©r√©monie : ${ceremonyTime || 'Non sp√©cifi√©e'}

Cr√©e un planning personnalis√© bas√© sur ce sc√©nario. Sois cr√©atif mais pragmatique !`;

    console.log('ü§ñ Calling Lovable AI Gateway with wedding planner prompt');

    const response = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${lovableApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.7,
        max_tokens: 2000,
      }),
    });

    if (!response.ok) {
      if (response.status === 429) {
        console.error('‚ùå Rate limit exceeded');
        return new Response(
          JSON.stringify({ error: 'Limite de requ√™tes atteinte, veuillez r√©essayer dans quelques instants.' }),
          { status: 429, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      if (response.status === 402) {
        console.error('‚ùå Payment required');
        return new Response(
          JSON.stringify({ error: 'Cr√©dits √©puis√©s, veuillez recharger votre compte Lovable AI.' }),
          { status: 402, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      console.error('‚ùå Lovable AI Gateway error:', response.status, response.statusText);
      throw new Error(`Lovable AI Gateway error: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Lovable AI response received');

    const aiResponse = data.choices[0].message.content;
    
    // Parse JSON response from AI
    let planningData;
    try {
      planningData = JSON.parse(aiResponse);
    } catch (parseError) {
      console.error('‚ùå Failed to parse AI response as JSON:', parseError);
      // Fallback: try to extract JSON from response
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        planningData = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('Failed to parse AI response');
      }
    }

    console.log('üéâ Generated planning with', planningData.tasks?.length || 0, 'tasks');

    return new Response(JSON.stringify(planningData), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå Error in ai-wedding-planner function:', error);
    return new Response(
      JSON.stringify({ 
        error: 'Erreur lors de la g√©n√©ration du planning', 
        details: error.message 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
