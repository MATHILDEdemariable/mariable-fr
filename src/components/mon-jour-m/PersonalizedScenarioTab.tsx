
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Clock, Users, Sparkles, Loader2, Lightbulb, AlertCircle } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/components/ui/use-toast';
import { PlanningEvent } from '../wedding-day/types/planningTypes';
import { addMinutes } from 'date-fns';
import { v4 as uuidv4 } from 'uuid';

interface PersonalizedTask {
  title: string;
  description: string;
  start_time: string;
  duration: number;
  category: string;
  priority: 'low' | 'medium' | 'high';
  assigned_role: string;
  day?: string;
  notes?: string;
}

interface PersonalizedScenarioTabProps {
  onSelectSuggestion: (suggestion: { title: string; description: string; category: string; priority: string; duration: number }) => Promise<void>;
  onClose: () => void;
  onPlanningGenerated?: (events: PlanningEvent[]) => void;
}

const PersonalizedScenarioTab: React.FC<PersonalizedScenarioTabProps> = ({
  onSelectSuggestion,
  onClose,
  onPlanningGenerated
}) => {
  const [scenario, setScenario] = useState('');
  const [referenceTime, setReferenceTime] = useState('15:00');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedTasks, setGeneratedTasks] = useState<PersonalizedTask[]>([]);
  const [selectedTasks, setSelectedTasks] = useState<string[]>([]);
  const [summary, setSummary] = useState('');
  const { toast } = useToast();

  const handleGenerate = async () => {
    if (!scenario.trim()) {
      toast({
        title: "Sc√©nario requis",
        description: "Veuillez d√©crire votre vision du jour J",
        variant: "destructive"
      });
      return;
    }

    if (!referenceTime) {
      toast({
        title: "Heure de r√©f√©rence requise",
        description: "Veuillez s√©lectionner une heure de c√©r√©monie",
        variant: "destructive"
      });
      return;
    }

    console.log('üéØ Generating personalized planning from scenario with reference time:', referenceTime);
    setIsGenerating(true);
    
    try {
      // Cr√©er un prompt enrichi avec l'heure de r√©f√©rence
      const enrichedPrompt = `
Heure de c√©r√©monie/r√©f√©rence : ${referenceTime}

Sc√©nario personnalis√© :
${scenario.trim()}

Instructions sp√©cifiques :
- Utilisez ${referenceTime} comme heure de r√©f√©rence principale pour organiser le planning
- Organisez tous les √©v√©nements autour de cette heure cl√©
- Pr√©voyez les pr√©paratifs AVANT cette heure de r√©f√©rence
- Planifiez les √©v√©nements suivants (cocktail, repas, soir√©e) APR√àS cette heure
- Incluez des temps de buffer r√©alistes entre les activit√©s
- Adaptez les horaires selon le type d'√©v√©nement d√©crit
`;

      const { data, error } = await supabase.functions.invoke('ai-wedding-planner', {
        body: {
          scenario: enrichedPrompt,
          weddingDate: new Date().toISOString().split('T')[0],
          guestCount: 50,
          ceremonyTime: referenceTime
        }
      });

      if (error) {
        console.error('‚ùå Error calling AI wedding planner:', error);
        throw error;
      }

      console.log('‚úÖ AI planning generated with reference time:', data);
      
      if (data.tasks && Array.isArray(data.tasks)) {
        setGeneratedTasks(data.tasks);
        setSummary(data.summary || '');
        
        // S√©lectionner automatiquement toutes les t√¢ches g√©n√©r√©es
        const allTaskIds = data.tasks.map((_, index) => index.toString());
        setSelectedTasks(allTaskIds);
        
        toast({
          title: "Planning g√©n√©r√© avec succ√®s",
          description: `${data.tasks.length} t√¢che${data.tasks.length > 1 ? 's' : ''} g√©n√©r√©e${data.tasks.length > 1 ? 's' : ''} autour de ${referenceTime}`
        });
      } else {
        throw new Error('Format de r√©ponse invalide de l\'IA');
      }

    } catch (error) {
      console.error('‚ùå Error generating personalized planning:', error);
      toast({
        title: "Erreur de g√©n√©ration",
        description: "Impossible de g√©n√©rer le planning. V√©rifiez votre connexion et r√©essayez.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  // Conversion des t√¢ches IA en √©v√©nements de planning bas√©s sur l'heure de r√©f√©rence
  const convertTasksToPlanningEvents = (tasks: PersonalizedTask[]): PlanningEvent[] => {
    const [refHours, refMinutes] = referenceTime.split(':').map(Number);
    const referenceDateTime = new Date();
    referenceDateTime.setHours(refHours, refMinutes, 0, 0);

    // S√©parer les t√¢ches pr√©-c√©r√©monie et post-c√©r√©monie
    const preCeremonyTasks: PersonalizedTask[] = [];
    const ceremonyTask: PersonalizedTask | null = tasks.find(task => 
      task.category === 'ceremonie' || task.title.toLowerCase().includes('c√©r√©monie')
    ) || null;
    const postCeremonyTasks: PersonalizedTask[] = [];

    tasks.forEach(task => {
      if (task === ceremonyTask) return; // Skip, on la traite s√©par√©ment
      
      if (task.category === 'preparation' || task.category === 'pr√©paratifs_final' || 
          task.title.toLowerCase().includes('pr√©paration') || 
          task.title.toLowerCase().includes('pr√©paratif')) {
        preCeremonyTasks.push(task);
      } else {
        postCeremonyTasks.push(task);
      }
    });

    const events: PlanningEvent[] = [];
    
    // 1. Traiter les t√¢ches pr√©-c√©r√©monie (en remontant depuis l'heure de r√©f√©rence)
    let currentTime = new Date(referenceDateTime);
    for (let i = preCeremonyTasks.length - 1; i >= 0; i--) {
      const task = preCeremonyTasks[i];
      currentTime = addMinutes(currentTime, -(task.duration + 15)); // 15 min de buffer
      
      events.unshift({
        id: uuidv4(),
        title: task.title,
        category: task.category === 'ceremonie' ? 'c√©r√©monie' : 
                 task.category === 'preparation' ? 'pr√©paratifs_final' :
                 task.category === 'photo' ? 'photos' :
                 task.category === 'reception' ? 'cocktail' :
                 task.category === 'party' ? 'soiree' : 'personnalis√©',
        startTime: new Date(currentTime),
        endTime: addMinutes(currentTime, task.duration),
        duration: task.duration,
        type: 'custom',
        notes: task.description + (task.notes ? ` ‚Ä¢ ${task.notes}` : ''),
        isHighlight: task.priority === 'high'
      });
    }

    // 2. Ajouter la c√©r√©monie √† l'heure de r√©f√©rence
    if (ceremonyTask) {
      events.push({
        id: uuidv4(),
        title: ceremonyTask.title,
        category: 'c√©r√©monie',
        startTime: new Date(referenceDateTime),
        endTime: addMinutes(referenceDateTime, ceremonyTask.duration),
        duration: ceremonyTask.duration,
        type: 'custom',
        notes: ceremonyTask.description + (ceremonyTask.notes ? ` ‚Ä¢ ${ceremonyTask.notes}` : ''),
        isHighlight: true // La c√©r√©monie est toujours un moment cl√©
      });
    }

    // 3. Traiter les t√¢ches post-c√©r√©monie
    currentTime = ceremonyTask ? 
      addMinutes(referenceDateTime, ceremonyTask.duration + 15) : 
      addMinutes(referenceDateTime, 45); // Si pas de c√©r√©monie, d√©caler de 45 min par d√©faut

    postCeremonyTasks.forEach(task => {
      events.push({
        id: uuidv4(),
        title: task.title,
        category: task.category === 'ceremonie' ? 'c√©r√©monie' : 
                 task.category === 'preparation' ? 'pr√©paratifs_final' :
                 task.category === 'photo' ? 'photos' :
                 task.category === 'reception' ? 'cocktail' :
                 task.category === 'party' ? 'soiree' : 'personnalis√©',
        startTime: new Date(currentTime),
        endTime: addMinutes(currentTime, task.duration),
        duration: task.duration,
        type: 'custom',
        notes: task.description + (task.notes ? ` ‚Ä¢ ${task.notes}` : ''),
        isHighlight: task.priority === 'high'
      });
      
      currentTime = addMinutes(currentTime, task.duration + 15); // 15 min de buffer
    });
    
    return events;
  };

  const handleTaskToggle = (taskIndex: number) => {
    const taskId = taskIndex.toString();
    setSelectedTasks(prev => 
      prev.includes(taskId)
        ? prev.filter(id => id !== taskId)
        : [...prev, taskId]
    );
  };

  const handleAddSelected = async () => {
    const tasksToAdd = generatedTasks.filter((_, index) => 
      selectedTasks.includes(index.toString())
    );
    
    if (tasksToAdd.length === 0) {
      toast({
        title: "Aucune t√¢che s√©lectionn√©e",
        description: "Veuillez s√©lectionner au moins une t√¢che √† ajouter",
        variant: "destructive"
      });
      return;
    }

    try {
      if (onPlanningGenerated) {
        console.log('üîÑ Converting AI tasks to planning events with reference time:', referenceTime);
        const planningEvents = convertTasksToPlanningEvents(tasksToAdd);
        await onPlanningGenerated(planningEvents);
      } else {
        // Fallback vers l'ancienne m√©thode
        for (const task of tasksToAdd) {
          await onSelectSuggestion({
            title: task.title,
            description: task.description,
            category: task.category,
            priority: task.priority,
            duration: task.duration
          });
        }
      }
      
      toast({
        title: "Planning g√©n√©r√© avec succ√®s",
        description: `${tasksToAdd.length} t√¢che${tasksToAdd.length > 1 ? 's ont √©t√© ajout√©es' : ' a √©t√© ajout√©e'} √† votre planning avec ${referenceTime} comme heure de r√©f√©rence`
      });
      
      setSelectedTasks([]);
      onClose();
    } catch (error) {
      console.error('‚ùå Error adding tasks:', error);
      toast({
        title: "Erreur d'ajout",
        description: "Impossible d'ajouter les t√¢ches s√©lectionn√©es",
        variant: "destructive"
      });
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityLabel = (priority: string) => {
    switch (priority) {
      case 'high': return '√âlev√©e';
      case 'medium': return 'Moyenne';
      case 'low': return 'Faible';
      default: return 'Standard';
    }
  };

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        <div className="flex items-center gap-2 mb-4">
          <Lightbulb className="h-5 w-5 text-purple-600" />
          <h3 className="text-lg font-medium">Cr√©er mon planning personnalis√©</h3>
        </div>

        {/* Heure de r√©f√©rence obligatoire */}
        <Card className="bg-blue-50 border-blue-200">
          <CardContent className="p-4">
            <div className="flex items-start gap-3">
              <AlertCircle className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
              <div className="flex-1">
                <h4 className="font-medium text-blue-800 mb-3">Heure de c√©r√©monie (obligatoire)</h4>
                <div className="space-y-2">
                  <Label htmlFor="referenceTime" className="text-blue-700">
                    Quelle est l'heure pr√©vue de votre c√©r√©monie ou √©v√©nement principal ?
                  </Label>
                  <Input
                    id="referenceTime"
                    type="time"
                    value={referenceTime}
                    onChange={(e) => setReferenceTime(e.target.value)}
                    className="w-32 text-lg font-semibold bg-white border-blue-300"
                    required
                  />
                  <p className="text-sm text-blue-600">
                    Cette heure servira de r√©f√©rence pour organiser automatiquement tout votre planning.
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <p className="text-sm text-gray-600">
          D√©crivez votre sc√©nario id√©al : type de c√©r√©monie, pr√©paratifs souhait√©s, qui fait quoi, vos priorit√©s... 
          L'IA cr√©era un planning personnalis√© organis√© autour de votre heure de c√©r√©monie !
        </p>

        <Textarea
          placeholder="Exemple : Nous voulons une c√©r√©monie la√Øque dans le jardin. Je souhaite me pr√©parer tranquillement avec mes t√©moins pendant 2h le matin. La d√©coration sera install√©e par le fleuriste en d√©but de matin√©e. Mon photographe doit arriver 2h avant la c√©r√©monie pour les photos de pr√©paration. Apr√®s la c√©r√©monie, cocktail sur la terrasse puis repas en int√©rieur..."
          value={scenario}
          onChange={(e) => setScenario(e.target.value)}
          className="min-h-[120px] resize-none"
          disabled={isGenerating}
        />

        <Button 
          onClick={handleGenerate}
          disabled={!scenario.trim() || !referenceTime || isGenerating}
          className="bg-purple-600 hover:bg-purple-700"
        >
          {isGenerating ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin mr-2" />
              G√©n√©ration en cours...
            </>
          ) : (
            <>
              <Sparkles className="h-4 w-4 mr-2" />
              G√©n√©rer mon planning personnalis√©
            </>
          )}
        </Button>
      </div>

      {summary && (
        <Card className="bg-purple-50 border-purple-200">
          <CardContent className="p-4">
            <h4 className="font-medium text-purple-800 mb-2">Conseils personnalis√©s</h4>
            <p className="text-sm text-purple-700">{summary}</p>
          </CardContent>
        </Card>
      )}

      {generatedTasks.length > 0 && (
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h4 className="font-medium">Planning personnalis√© g√©n√©r√©</h4>
            <Badge variant="secondary">
              {generatedTasks.length} t√¢che{generatedTasks.length > 1 ? 's' : ''} ‚Ä¢ R√©f√©rence: {referenceTime}
            </Badge>
          </div>

          <div className="grid grid-cols-1 gap-3 max-h-[400px] overflow-y-auto">
            {generatedTasks.map((task, index) => (
              <Card 
                key={index} 
                className={`cursor-pointer transition-all ${
                  selectedTasks.includes(index.toString()) 
                    ? 'ring-2 ring-purple-400 bg-purple-50' 
                    : 'hover:shadow-md'
                }`}
              >
                <CardContent className="p-4">
                  <div className="flex items-start gap-3">
                    <Checkbox
                      checked={selectedTasks.includes(index.toString())}
                      onCheckedChange={() => handleTaskToggle(index)}
                      className="mt-1"
                    />
                    
                    <div className="flex-1">
                      <div className="flex items-start justify-between mb-2">
                        <h5 className="font-medium">{task.title}</h5>
                        {task.day && (
                          <Badge variant="outline" className="text-xs">
                            {task.day}
                          </Badge>
                        )}
                      </div>
                      
                      <p className="text-sm text-gray-600 mb-3">
                        {task.description}
                      </p>
                      
                      {task.notes && (
                        <p className="text-xs text-purple-600 mb-3 italic">
                          üí° {task.notes}
                        </p>
                      )}
                      
                      <div className="flex items-center gap-2 text-xs flex-wrap">
                        {task.start_time && (
                          <Badge variant="outline" className="flex items-center gap-1">
                            <Clock className="h-3 w-3" />
                            {task.start_time}
                          </Badge>
                        )}
                        <Badge variant="outline" className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          {task.duration} min
                        </Badge>
                        <Badge className={getPriorityColor(task.priority)}>
                          {getPriorityLabel(task.priority)}
                        </Badge>
                        <Badge variant="secondary">
                          {task.category}
                        </Badge>
                        {task.assigned_role && (
                          <Badge variant="outline" className="flex items-center gap-1">
                            <Users className="h-3 w-3" />
                            {task.assigned_role}
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="flex gap-2 pt-4 border-t">
            <Button variant="outline" onClick={onClose}>
              Annuler
            </Button>
            <Button 
              onClick={handleAddSelected}
              disabled={selectedTasks.length === 0}
              className="bg-purple-600 hover:bg-purple-700"
            >
              Ajouter {selectedTasks.length} t√¢che{selectedTasks.length > 1 ? 's' : ''} au planning
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default PersonalizedScenarioTab;
